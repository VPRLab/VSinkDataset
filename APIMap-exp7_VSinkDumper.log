APIMap: <android.accessibilityservice.AccessibilityService: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accessibilityservice.AccessibilityService: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accessibilityservice.AccessibilityService: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)> --> (Sink_DIRECT, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> --> (Sink_DIRECT, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AbstractAccountAuthenticator: java.lang.String getAuthTokenLabel(java.lang.String)> --> (Sink_SRC, android.permission.ACCOUNT_MANAGER, signature)
APIMap: <android.accounts.AccountAuthenticatorActivity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.accounts.AccountManager: android.accounts.Account[] getAccounts()> --> (Sink_SRC, android.permission.GET_ACCOUNTS, normal)
APIMap: <android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> --> (Sink_SRC, android.permission.GET_ACCOUNTS, normal)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_DIRECT, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.GET_ACCOUNTS, normal)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.USE_CREDENTIALS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.USE_CREDENTIALS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.GET_ACCOUNTS, normal)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, android.permission.GET_ACCOUNTS, normal)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_DIRECT, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_DIRECT, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> --> (Sink_SRC, android.permission.USE_CREDENTIALS, dangerous)
APIMap: <android.accounts.AccountManager: void clearPassword(android.accounts.Account)> --> (Sink_DIRECT, android.permission.MANAGE_ACCOUNTS, dangerous)
APIMap: <android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.ActivityGroup: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ActivityGroup: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ActivityGroup: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ActivityGroup: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ActivityManager: java.util.List getRecentTasks(int,int)> --> (Sink_SRC, android.permission.GET_TASKS, dangerous)
APIMap: <android.app.ActivityManager: java.util.List getRunningTasks(int)> --> (Sink_SRC, android.permission.GET_TASKS, dangerous)
APIMap: <android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> --> (Sink_DIRECT, android.permission.RESTART_PACKAGES, normal)
APIMap: <android.app.ActivityManager: void restartPackage(java.lang.String)> --> (Sink_DIRECT, android.permission.RESTART_PACKAGES, normal)
APIMap: <android.app.Activity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Activity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Activity: void sendBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Activity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Activity: void setContentView(int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.app.Activity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Activity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Activity: void startActivity(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Activity: void startActivityForResult(android.content.Intent,int)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.AlarmManager: void setTime(long)> --> (Sink_DIRECT, android.permission.SET_TIME, signatureOrSystem)
APIMap: <android.app.AlarmManager: void setTimeZone(java.lang.String)> --> (Sink_DIRECT, android.permission.SET_TIME_ZONE, dangerous)
APIMap: <android.app.AliasActivity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.AliasActivity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.AliasActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.AliasActivity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Application: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Application: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Application: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Application: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Application: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Application: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgentHelper: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.backup.BackupAgentHelper: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgent: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgent: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.backup.BackupAgent: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.backup.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ExpandableListActivity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ExpandableListActivity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ExpandableListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.IntentService: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.IntentService: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.IntentService: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.IntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.IntentService: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.IntentService: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ListActivity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ListActivity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.ListActivity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Service: android.content.ComponentName startService(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Service: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Service: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Service: void sendBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Service: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.Service: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.Service: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Service: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.Service: void startActivity(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.app.TabActivity: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.TabActivity: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.TabActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.TabActivity: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.WallpaperManager: void clear()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.WallpaperManager: void setResource(int)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.app.WallpaperManager: void setStream(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.appwidget.AppWidgetManager: void bindAppWidgetId(int,android.content.ComponentName)> --> (Sink_DIRECT, android.permission.BIND_APPWIDGET, signatureOrSystem)
APIMap: <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> --> (Sink_DIRECT, android.permission.BLUETOOTH_ADMIN, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: boolean disable()> --> (Sink_DIRECT, android.permission.BLUETOOTH_ADMIN, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: boolean enable()> --> (Sink_DIRECT, android.permission.BLUETOOTH_ADMIN, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> --> (Sink_DIRECT, android.permission.BLUETOOTH_ADMIN, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: boolean startDiscovery()> --> (Sink_DIRECT, android.permission.BLUETOOTH_ADMIN, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: java.lang.String getName()> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.bluetooth.BluetoothDevice: java.lang.String getName()> --> (Sink_SRC, android.permission.BLUETOOTH, dangerous)
APIMap: <android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> --> (Sink_SRC, android.permission.READ_SYNC_STATS, normal)
APIMap: <android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> --> (Sink_SRC, android.permission.READ_SYNC_SETTINGS, normal)
APIMap: <android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> --> (Sink_DIRECT, android.permission.WRITE_SYNC_SETTINGS, dangerous)
APIMap: <android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> --> (Sink_DIRECT, android.permission.WRITE_SYNC_SETTINGS, dangerous)
APIMap: <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> --> (Sink_DIRECT, android.permission.WRITE_SYNC_SETTINGS, dangerous)
APIMap: <android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> --> (Sink_DIRECT, android.permission.WRITE_SYNC_SETTINGS, dangerous)
APIMap: <android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> --> (Sink_DIRECT, android.permission.WRITE_SYNC_SETTINGS, dangerous)
APIMap: <android.content.Context: android.content.ComponentName startService(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.Context: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.Context: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.content.Context: void sendBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.Context: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.content.Context: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.Context: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.Context: void startActivity(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.ContextWrapper: void startActivity(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.MutableContextWrapper: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.MutableContextWrapper: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.content.MutableContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.hardware.Camera: android.hardware.Camera open()> --> (Sink_DIRECT, android.permission.CAMERA, dangerous)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> --> (Sink_DIRECTByPara, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: java.util.List getProviders(boolean)> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void removeTestProvider(java.lang.String)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> --> (Sink_DIRECT, android.permission.ACCESS_MOCK_LOCATION, dangerous)
APIMap: <android.media.AudioManager: void setBluetoothScoOn(boolean)> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void setMicrophoneMute(boolean)> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void setMode(int)> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void setParameters(java.lang.String)> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void setSpeakerphoneOn(boolean)> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void startBluetoothSco()> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.AudioManager: void stopBluetoothSco()> --> (Sink_DIRECT, android.permission.MODIFY_AUDIO_SETTINGS, dangerous)
APIMap: <android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> --> (Sink_SRC, android.permission.ACCESS_NETWORK_STATE, normal)
APIMap: <android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> --> (Sink_SRC, android.permission.ACCESS_NETWORK_STATE, normal)
APIMap: <android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> --> (Sink_SRC, android.permission.ACCESS_NETWORK_STATE, normal)
APIMap: <android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> --> (Sink_SRC, android.permission.ACCESS_WIFI_STATE, normal)
APIMap: <android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> --> (Sink_SRC, android.permission.ACCESS_WIFI_STATE, normal)
APIMap: <android.net.wifi.WifiManager: boolean disableNetwork(int)> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean disconnect()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean pingSupplicant()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean reassociate()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean reconnect()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean removeNetwork(int)> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean saveConfiguration()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: boolean startScan()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> --> (Sink_SRC, android.permission.ACCESS_WIFI_STATE, normal)
APIMap: <android.net.wifi.WifiManager: java.util.List getScanResults()> --> (Sink_SRC, android.permission.ACCESS_WIFI_STATE, normal)
APIMap: <android.net.wifi.WifiManager$MulticastLock: void acquire()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_MULTICAST_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager$MulticastLock: void finalize()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_MULTICAST_STATE, dangerous)
APIMap: <android.net.wifi.WifiManager$MulticastLock: void release()> --> (Sink_DIRECT, android.permission.CHANGE_WIFI_MULTICAST_STATE, dangerous)
APIMap: <android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> --> (Sink_SRC, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <android.os.PowerManager: void goToSleep(long)> --> (Sink_DIRECT, android.permission.DEVICE_POWER, signature)
APIMap: <android.os.PowerManager: void reboot(java.lang.String)> --> (Sink_DIRECT, android.permission.REBOOT, signatureOrSystem)
APIMap: <android.os.RecoverySystem: void installPackage(android.content.Context,java.io.File)> --> (Sink_DIRECT, android.permission.REBOOT, signatureOrSystem)
APIMap: <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context)> --> (Sink_DIRECT, android.permission.REBOOT, signatureOrSystem)
APIMap: <android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> --> (Sink_SRC, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> --> (Sink_SRC, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void clearHistory(android.content.ContentResolver)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void clearSearches(android.content.ContentResolver)> --> (Sink_DIRECT, com.android.browser.permission.WRITE_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void truncateHistory(android.content.ContentResolver)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> --> (Sink_DIRECT, com.android.browser.permission.READ_HISTORY_BOOKMARKS, dangerous)
APIMap: <android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.ContactsContract$Contacts: android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.ContactsContract$Contacts: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$People: java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> --> (Sink_SRC, android.permission.READ_CONTACTS, dangerous)
APIMap: <android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_DIRECTByPara, android.permission.WRITE_CONTACTS, dangerous)
APIMap: <android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> --> (Sink_DIRECTByPara, android.permission.WRITE_SETTINGS, dangerous)
APIMap: <android.service.wallpaper.WallpaperService: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.service.wallpaper.WallpaperService: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.service.wallpaper.WallpaperService: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.speech.RecognitionService: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.speech.RecognitionService: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.speech.RecognitionService: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.speech.RecognitionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.speech.RecognitionService: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.speech.SpeechRecognizer: void cancel()> --> (Sink_DIRECT, android.permission.RECORD_AUDIO, dangerous)
APIMap: <android.speech.SpeechRecognizer: void startListening(android.content.Intent)> --> (Sink_DIRECT, android.permission.RECORD_AUDIO, dangerous)
APIMap: <android.speech.SpeechRecognizer: void stopListening()> --> (Sink_DIRECT, android.permission.RECORD_AUDIO, dangerous)
APIMap: <android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.PhoneNumberUtils: java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)> --> (Sink_SRC, android.permission.CALL_PRIVILEGED, signatureOrSystem)
APIMap: <android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> --> (Sink_DIRECT, android.permission.SEND_SMS, dangerous)
APIMap: <android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getDeviceId()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getLine1Number()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getSubscriberId()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> --> (Sink_SRC, android.permission.READ_PHONE_STATE, dangerous)
APIMap: <android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> --> (Sink_SRC, android.permission.ACCESS_FINE_LOCATION, dangerous)
APIMap: <android.view.ContextThemeWrapper: void clearWallpaper()> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.view.ContextThemeWrapper: void sendBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.view.ContextThemeWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.view.ContextThemeWrapper: void sendStickyBroadcast(android.content.Intent)> --> (Sink_SrcSend, stow.permission.DEPENDS, stowLevel)
APIMap: <android.view.ContextThemeWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> --> (Sink_SrcSend, android.permission.BROADCAST_STICKY, normal)
APIMap: <android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)> --> (Sink_DIRECT, android.permission.SET_WALLPAPER, normal)
APIMap: <android.view.Surface: void setOrientation(int,int)> --> (Sink_DIRECT, android.permission.ACCESS_SURFACE_FLINGER, signature)
APIMap: <android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.webkit.WebView: void <init>(android.content.Context)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String)> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String[])> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)> --> (Sink_DIRECTByPara, android.permission.READ_LOGS, signatureOrSystem)
APIMap: <java.net.DatagramSocket: void <init>(int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.DatagramSocket: void <init>(int,java.net.InetAddress)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.DatagramSocket: void <init>(java.net.SocketAddress)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.HttpURLConnection: void <init>(java.net.URL)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.MulticastSocket: void <init>(int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.MulticastSocket: void <init>(java.net.SocketAddress)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.ServerSocket: void bind(java.net.SocketAddress)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.ServerSocket: void bind(java.net.SocketAddress,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.ServerSocket: void <init>(int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.ServerSocket: void <init>(int,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.lang.String,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.lang.String,int,boolean)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.net.InetAddress,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.net.InetAddress,int,boolean)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.URL: java.lang.Object getContent(java.lang.Class[])> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.params.HttpParams)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)> --> (Sink_SRC, susi.permission.UNIQUE_IDENTIFIER, susiLevel)
APIMap: <android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> --> (Sink_SRC, susi.permission.UNIQUE_IDENTIFIER, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsSatellite: int getPrn()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getFeatureName()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getAdminArea()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: float getSpeed()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.util.Locale getLocale()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getCountryName()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsSatellite: float getSnr()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: int getBytesSize()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.cdma.CdmaCellLocation: int getNetworkId()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: int getMaxAddressLineIndex()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Geocoder: java.util.List getFromLocation(double,double,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getVerticalAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: double getLatitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: float getBearing()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationProvider: java.lang.String getName()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Mesh$AllocationBuilder: int getCurrentVertexTypeIndex()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: android.os.Bundle getExtras()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getPowerRequirement()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.gsm.GsmCellLocation: int getPsc()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsStatus: java.lang.Iterable getSatellites()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getPremises()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.gsm.GsmCellLocation: int getLac()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.cdma.CdmaCellLocation: int getSystemId()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getThoroughfare()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: long getTime()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Element getElement()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getAddressLine(int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getPhone()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.cdma.CdmaCellLocation: int getBaseStationId()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getUrl()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getLocality()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: java.lang.String getProvider()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationProvider: int getPowerRequirement()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationManager: java.util.List getAllProviders()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getSpeedAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsStatus: int getTimeToFirstFix()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: android.os.Bundle getExtras()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: double getAltitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: double getLongitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsSatellite: float getElevation()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Type getType()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.view.Surface getSurface()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Mesh$AllocationBuilder: int getCurrentIndexSetIndex()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationProvider: int getAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsStatus: int getMaxSatellites()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.gsm.GsmCellLocation: int getCid()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Geocoder: java.util.List getFromLocationName(java.lang.String,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getPostalCode()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.GpsSatellite: float getAzimuth()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getSubLocality()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getSubAdminArea()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: double getLatitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getHorizontalAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: int getUsage()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getCountryCode()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: float getAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Location: double getLongitude()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Criteria: int getBearingAccuracy()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.location.Address: java.lang.String getSubThoroughfare()> --> (Sink_SRC, susi.permission.LOCATION_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> --> (Sink_SRC, susi.permission.ACCOUNT_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothClass: int getMajorDeviceClass()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothDevice: int getBondState()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothDevice: java.lang.String getAddress()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealthAppConfiguration: int getRole()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: int getScanMode()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothClass: int getDeviceClass()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: int getState()> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> --> (Sink_SRC, susi.permission.BLUETOOTH_INFORMATION, susiLevel)
APIMap: <org.apache.http.impl.cookie.BrowserCompatSpec: org.apache.http.Header getVersionHeader()> --> (Sink_SRC, susi.permission.BROWSER_INFORMATION, susiLevel)
APIMap: <org.apache.http.impl.cookie.BrowserCompatSpec: int getVersion()> --> (Sink_SRC, susi.permission.BROWSER_INFORMATION, susiLevel)
APIMap: <java.io.Writer: void write(char[])> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: void write(char[],int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: void write(int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: void write(java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: void write(java.lang.String,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.io.Writer append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.io.Writer append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.Writer: java.lang.Appendable append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.lang.Appendable append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: void write(java.lang.String,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: void write(int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.io.Writer append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: void write(char[])> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.lang.Appendable append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: void write(java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.BufferedWriter: void write(char[],int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.lang.Appendable append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.io.Writer append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: void write(java.lang.String,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: void write(int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.io.Writer append(java.lang.CharSequence)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.io.Writer append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: void write(char[])> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.lang.Appendable append(char)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: void write(java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <java.io.FileWriter: void write(char[],int,int)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> (Sink_DIRECTByPara, manual.permission.Manual, manualLevel)
APIMap: <android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)> --> (Sink_DIRECTByPara, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> --> (Sink_DIRECTByPara, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)> --> (Sink_SrcSend, manual.permission.Manual, manualLevel)
APIMap: <android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> --> (Sink_SrcSend, android.permission.INTERNET, dangerous)
APIMap: <android.util.Log: int v(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int d(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int i(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int w(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int e(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int wtf(java.lang.String,java.lang.String)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
APIMap: <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> --> (Sink_PUBLIC, manual.permission.Manual, manualLevel)
